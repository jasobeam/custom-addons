<?xml version="1.0"?>
<odoo noupdate="0">
    <record id="ir_cron_publicar_post" model="ir.cron">
        <field name="name">GL Publicar Post Task</field>
        <field name="model_id" ref="model_project_task"/>
        <field name="state">code</field>
        <field name="code">
<![CDATA[
# Get all scheduled posts
records_to_process = model.search([
    ('post_estado', '=', 'Programado'),
    ('fecha_publicacion', '<=', now)
])
record_count = len(records_to_process)

if record_count > 0:
    _logger.info("╔══════════════════════════════════════╗")
    _logger.info(f"║ INICIANDO PUBLICACIÓN DE POSTS      ║")
    _logger.info(f"║ Posts programados encontrados: {record_count} ║")
    _logger.info("╚══════════════════════════════════════╝")

success_count = 0
error_count = 0

for record in records_to_process:
    try:
        _logger.info(f"► Procesando Post ID {record.id}: {record.name or 'Sin nombre'}")
        record.publicar_post()
        success_count += 1
        _logger.info(f"✔ Post ID {record.id} publicado exitosamente")

    except Exception as e:
        error_count += 1
        error_message = f"Error al publicar el post: {str(e)}"
        _logger.error(f"✖ ERROR en Post ID {record.id}: {e}")
        _logger.error(traceback.format_exc())  # Detailed error trace

        # Update post status to Error
        record.write({
            'post_estado': 'Error',
            'state': '01_in_progress'
        })

        # Log error in the post's chatter
        record.message_post(body=error_message, message_type='comment')

# Final summary
if record_count > 0:
    _logger.info("╔══════════════════════════════════════╗")
    _logger.info(f"║ RESUMEN FINAL DE PUBLICACIÓN        ║")
    _logger.info(f"║ Total procesados: {record_count}")
    _logger.info(f"║ Publicados exitosamente: {success_count}")
    _logger.info(f"║ Errores: {error_count}")
    _logger.info("╚══════════════════════════════════════╝")
else:
    _logger.info("No hay posts programados para publicar en este momento")
]]>
        </field>
        <field name="interval_number">10</field>
        <field name="interval_type">minutes</field>
        <field name="active">True</field>
        <field name="priority">0</field>
        <field name="user_id" ref="base.user_root"/>
    </record>
    <record id="ir_cron_tiktok_renew_token" model="ir.cron">
        <field name="name">GL TikTok Renew Token Daily</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
            for record in model.search([('tiktok_refresh_token', '!=', False)]):
            try:
                record.tiktok_renew_token()
            except Exception as e:
                _logger.error(f"Error al renovar el token {record.id}: {e}")
        </field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active" eval="True"/>
    </record>
    <record id="ir_cron_check_ins_processing" model="ir.cron">
        <field name="name">GL Revisar publicaciones en proceso</field>
        <field name="model_id" ref="model_project_task"/>
        <field name="state">code</field>
        <field name="code">
            for record in model.search([('post_estado', '=', 'Procesando')]):
                try:
                    record.revisar_post(from_cron=True)
                except Exception as e:
                    error_message = f"Error al revisar el post: {str(e)}"
                    _logger.error(f"Error al revisar el post {record.id}: {e}")
                    record.message_post(body=error_message, message_type='comment')
        </field>
        <field name="interval_number">5</field>
        <field name="interval_type">minutes</field>
        <field name="active">True</field>
    </record>
    <record id="ir_cron_tiktok_renew_token" model="ir.cron">
        <field name="name">GL TikTok Renew Token Daily</field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="code">
            for record in model.search([('tiktok_refresh_token', '!=', False)]):
                try:
                    record.tiktok_renew_token()
                except Exception as e:
                    _logger.error(f"Error al renovar el token {record.id}: {e}")
        </field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
        <field name="priority">10</field>
    </record>
</odoo>
